use crate::data::SerializableData;

// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Data {
    #[prost(oneof = "data::Value", tags = "1, 2, 3, 4, 5, 6, 7, 8")]
    pub value: ::core::option::Option<data::Value>,
}
/// Nested message and enum types in `Data`.
pub mod data {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(bool, tag = "1")]
        Boolean(bool),
        #[prost(int32, tag = "2")]
        Integer(i32),
        #[prost(int64, tag = "3")]
        BigInteger(i64),
        #[prost(float, tag = "4")]
        FloatValue(f32),
        #[prost(double, tag = "5")]
        BigFloat(f64),
        #[prost(string, tag = "6")]
        StringLiteral(::prost::alloc::string::String),
        #[prost(message, tag = "7")]
        KeyValuePair(::prost::alloc::boxed::Box<super::Kvp>),
        #[prost(message, tag = "8")]
        List(super::Array),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kvp {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, optional, boxed, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::boxed::Box<Data>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Array {
    #[prost(message, repeated, tag = "1")]
    pub elements: ::prost::alloc::vec::Vec<Data>,
}

impl From<SerializableData> for Data {
    fn from(data: SerializableData) -> Self {
        match data {
            SerializableData::Boolean(value) => Data {
                value: Some(data::Value::Boolean(value)),
            },
            SerializableData::Integer(value) => Data {
                value: Some(data::Value::Integer(value)),
            },
            SerializableData::BigInteger(value) => Data {
                value: Some(data::Value::BigInteger(value)),
            },
            SerializableData::Float(value) => Data {
                value: Some(data::Value::FloatValue(value)),
            },
            SerializableData::BigFloat(value) => Data {
                value: Some(data::Value::BigFloat(value)),
            },
            SerializableData::StringLiteral(value) => Data {
                value: Some(data::Value::StringLiteral(value)),
            },
            SerializableData::KeyValuePair(key, value) => Data {
                value: Some(data::Value::KeyValuePair(Box::new(Kvp {
                    key,
                    value: Some(Box::new(Data::from(*value))),
                }))),
            },
            SerializableData::List(elements) => Data {
                value: Some(data::Value::List(Array {
                    elements: elements.into_iter().map(Into::into).collect(),
                })),
            },
        }
    }
}

impl TryFrom<Data> for SerializableData {
    type Error = String;

    fn try_from(proto: Data) -> Result<Self, Self::Error> {
        match proto.value {
            Some(data::Value::Boolean(value)) => Ok(SerializableData::Boolean(value)),
            Some(data::Value::Integer(value)) => Ok(SerializableData::Integer(value)),
            Some(data::Value::BigInteger(value)) => Ok(SerializableData::BigInteger(value)),
            Some(data::Value::FloatValue(value)) => Ok(SerializableData::Float(value)),
            Some(data::Value::BigFloat(value)) => Ok(SerializableData::BigFloat(value)),
            Some(data::Value::StringLiteral(value)) => Ok(SerializableData::StringLiteral(value)),
            Some(data::Value::KeyValuePair(kvp)) => {
                let kvp = *kvp; // Unbox the KVP
                let key = kvp.key;
                let value = (*kvp.value.unwrap()).try_into()?;
                Ok(SerializableData::KeyValuePair(key, Box::new(value)))
            }
            Some(data::Value::List(array)) => {
                let elements = array
                    .elements
                    .into_iter()
                    .map(TryInto::try_into)
                    .collect::<Result<Vec<_>, _>>()?;
                Ok(SerializableData::List(elements))
            }
            None => Err("Missing value in Data".to_string()),
        }
    }
}